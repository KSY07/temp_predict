import { IBOMComponent } from './bom';

export enum PredictionStandard {
    TELCORDIA_SR_422 = 'TELCORDIA_SR_422',
    SIEMENS_SN29500 = 'SIEMENS_SN29500',
    MIL_STD_217F = 'MIL_STD_217F'
}

export enum ComponentCategory {
    // Electronic Components
    RESISTOR = 'RESISTOR',
    CAPACITOR = 'CAPACITOR',
    INDUCTOR = 'INDUCTOR',
    DIODE = 'DIODE',
    TRANSISTOR = 'TRANSISTOR',
    IC = 'IC',
    CONNECTOR = 'CONNECTOR',
    RELAY = 'RELAY',
    SWITCH = 'SWITCH',
    TRANSFORMER = 'TRANSFORMER',
    PCB = 'PCB',
    
    // Mechanical Components
    BEARING = 'BEARING',
    GEAR = 'GEAR',
    SHAFT = 'SHAFT',
    SPRING = 'SPRING',
    VALVE = 'VALVE',
    PUMP = 'PUMP',
    MOTOR = 'MOTOR',
    
    // Other
    CABLE = 'CABLE',
    FAN = 'FAN',
    BATTERY = 'BATTERY',
    POWER_SUPPLY = 'POWER_SUPPLY',
    SENSOR = 'SENSOR',
    CUSTOM = 'CUSTOM'
}

export enum Environment {
    // Ground Environment
    GROUND_BENIGN = 'GB',
    GROUND_FIXED = 'GF',
    GROUND_MOBILE = 'GM',
    
    // Naval Environment
    NAVAL_SHELTERED = 'NS',
    NAVAL_UNSHELTERED = 'NU',
    NAVAL_UNDERSEA = 'USL',
    
    // Airborne Environment
    AIRBORNE_INHABITED_CARGO = 'AIC',
    AIRBORNE_INHABITED_FIGHTER = 'AIF',
    AIRBORNE_UNINHABITED_CARGO = 'AUC',
    AIRBORNE_UNINHABITED_FIGHTER = 'AUF',
    AIRBORNE_ROTARY_WINGED = 'ARW',
    
    // Space Environment
    SPACE_FLIGHT = 'SF',
    
    // Cannon Environment
    CANNON_LAUNCH = 'CL',
    
    // Missile Environment
    MISSILE_LAUNCH = 'ML',
    MISSILE_FREE_FLIGHT = 'MFF'
}

export enum Quality {
    // For MIL-STD-217F
    MIL_SPEC = 'MIL_SPEC',
    LOWER = 'LOWER',
    COMMERCIAL = 'COMMERCIAL',
    PLASTIC = 'PLASTIC',
    
    // For Telcordia
    LEVEL_I = 'LEVEL_I',    // Hermetic
    LEVEL_II = 'LEVEL_II',  // Non-Hermetic
    LEVEL_III = 'LEVEL_III' // Commercial
}

export interface IEnvironmentalFactors {
    temperature: number;            // Operating temperature in Celsius
    temperatureDelta?: number;      // Temperature cycling range
    humidity?: number;              // Relative humidity percentage
    vibration?: number;             // Vibration level
    altitude?: number;              // Operating altitude in meters
    voltage?: number;               // Applied voltage
    powerRating?: number;           // Power rating
    electricalStress?: number;      // Electrical stress factor (0-1)
    thermalStress?: number;         // Thermal stress factor (0-1)
    dutyCycle?: number;             // Duty cycle (0-1)
}

export interface IPredictionComponent extends IBOMComponent {
    category: ComponentCategory;
    environment: Environment;
    quality: Quality;
    environmentalFactors?: IEnvironmentalFactors;
    operatingHours?: number;        // Hours per year
    dutyCycle?: number;             // Percentage of time in operation
    
    // Additional specifications for prediction
    specifications: {
        // Common electrical parameters
        ratedPower?: number;
        ratedVoltage?: number;
        ratedCurrent?: number;
        resistance?: number;
        capacitance?: number;
        inductance?: number;
        
        // IC specific
        gateCount?: number;
        technology?: string;
        packageType?: string;
        pinCount?: number;
        
        // Mechanical parameters
        rpm?: number;
        load?: number;
        
        // Custom parameters
        [key: string]: any;
    };
}

export interface IPredictionResult {
    componentId: string;
    componentName: string;
    standard: PredictionStandard;
    baseFailureRate: number;        // λb - Base failure rate
    failureRate: number;             // λ - Adjusted failure rate (failures/10^6 hours)
    mtbf: number;                    // Mean Time Between Failures (hours)
    reliability: (time: number) => number;  // R(t) = e^(-λt)
    
    // Factors used in calculation
    factors: {
        piT?: number;               // Temperature factor
        piE?: number;               // Environment factor
        piQ?: number;               // Quality factor
        piS?: number;               // Stress factor
        piC?: number;               // Complexity factor
        piL?: number;               // Learning factor
        piCV?: number;              // Configuration/Voltage factor
        [key: string]: number | undefined;
    };
    
    // Detailed results
    details?: {
        calculationMethod?: string;
        notes?: string[];
        warnings?: string[];
    };
}

export interface IPredictionStandard {
    name: PredictionStandard;
    calculate(component: IPredictionComponent): IPredictionResult;
    getSupportedCategories(): ComponentCategory[];
}

export interface IPredictionService {
    // Calculate failure rate for a single component
    calculateFailureRate(
        component: IPredictionComponent,
        standard: PredictionStandard
    ): IPredictionResult;
    
    // Calculate failure rates for all components in BOM
    calculateBOMFailureRates(
        bomComponent: IBOMComponent,
        standard: PredictionStandard,
        defaultEnvironment?: Environment,
        defaultQuality?: Quality
    ): IPredictionResult[];
    
    // Calculate system-level reliability metrics
    calculateSystemReliability(
        results: IPredictionResult[],
        missionTime: number
    ): ISystemReliability;
    
    // Register custom prediction standard
    registerStandard(standard: IPredictionStandard): void;
}

export interface ISystemReliability {
    totalFailureRate: number;       // System failure rate
    systemMTBF: number;             // System MTBF
    reliability: (time: number) => number;
    
    // Reliability at specific mission times
    reliabilityMetrics: {
        oneYear: number;
        fiveYears: number;
        tenYears: number;
        missionTime: number;
    };
    
    // Component criticality
    criticalComponents: {
        componentId: string;
        componentName: string;
        failureRate: number;
        contribution: number;       // Percentage contribution to system failure rate
    }[];
}

// Base class for prediction standards
export abstract class PredictionStandardBase implements IPredictionStandard {
    abstract name: PredictionStandard;
    abstract calculate(component: IPredictionComponent): IPredictionResult;
    abstract getSupportedCategories(): ComponentCategory[];
    
    protected createResult(
        component: IPredictionComponent,
        baseFailureRate: number,
        factors: Record<string, number>,
        details?: any
    ): IPredictionResult {
        // Calculate final failure rate
        let failureRate = baseFailureRate;
        for (const factor of Object.values(factors)) {
            if (factor !== undefined) {
                failureRate *= factor;
            }
        }
        
        // Calculate MTBF
        const mtbf = failureRate > 0 ? 1e6 / failureRate : Infinity;
        
        // Reliability function
        const reliability = (time: number) => Math.exp(-failureRate * time / 1e6);
        
        return {
            componentId: component.id,
            componentName: component.name,
            standard: this.name,
            baseFailureRate,
            failureRate,
            mtbf,
            reliability,
            factors,
            details
        };
    }
    
    // Common temperature factor calculation (Arrhenius model)
    protected calculateArrheniusTemperatureFactor(
        tRef: number,    // Reference temperature
        tOp: number,     // Operating temperature
        ea: number       // Activation energy
    ): number {
        const k = 8.617e-5; // Boltzmann constant (eV/K)
        const tRefK = tRef + 273.15;
        const tOpK = tOp + 273.15;
        
        return Math.exp(ea / k * (1 / tRefK - 1 / tOpK));
    }
    
    // Common electrical stress factor
    protected calculateStressFactor(
        operatingStress: number,
        ratedStress: number,
        n: number = 2.5  // Stress exponent
    ): number {
        const ratio = operatingStress / ratedStress;
        return Math.pow(ratio, n);
    }
}

// Extension interface for BOM components
export interface IBOMComponentWithPrediction extends IBOMComponent {
    predictionData?: {
        category?: ComponentCategory;
        environment?: Environment;
        quality?: Quality;
        environmentalFactors?: IEnvironmentalFactors;
        results?: Record<PredictionStandard, IPredictionResult>;
    };
}