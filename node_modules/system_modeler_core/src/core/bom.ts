export interface IBOMComponent  {
    readonly id: string; // BOM Code와 동일
    name: string; // 장치 명
    description?: string; // 장치 설명 (Optional)
    partNumber: string; // 파트 번호
    quantity: number; // 총 수량
    unit: IUnit; // 단위, 단위 심볼
    manufacturer?: IManufacturer; // 제작사
    unitPrice?: number; // 단가
    leadTime?: number; // 조달 시간
    specifications?: Record<string, any>; // 장치 특성
    children?: IBOMComponent[]; // 하부 BOM List
    
    addChild: (component:IBOMComponent) => void;
    removeChild: (componentId:string) => boolean;
    getTotalCost: () => number;
    findComponent: (componentId: string) => IBOMComponent | null;
    getAllComponents: () => IBOMComponent[];
}

export type IBOM = {
    id: string;
    name: string;
    version: string;
    createdAt: Date;
    updatedAt: Date;
    rootComponent: IBOMComponent;
    totalCost?: number;
}

export type ISystem = {
    id: string;
    name: string;
    bom: IBOM;
}

export type IManufacturer = {
    id: string;
    name: string;
    country: string;
    contact?: string;
}

export type IUnit = {
    name: string;
    symbol: string;
}

export class BOMComponent implements IBOMComponent {
    id: string;
    name: string;
    description?: string;
    partNumber: string;
    quantity: number;
    unit: IUnit;
    manufacturer?: IManufacturer;
    unitPrice?: number;
    leadTime?: number;
    specifications?: Record<string, any>
    children?: IBOMComponent[];

    constructor(data: Omit<IBOMComponent, 'addChild' | 'removeChild' | 'getTotalCost' | 'findComponent' | 'getAllComponents'>) {
        this.id = data.id;
        this.name = data.name;
        this.description = data.description;
        this.partNumber = data.partNumber;
        this.quantity = data.quantity;
        this.unit = data.unit;
        this.manufacturer = data.manufacturer;
        this.unitPrice = data.unitPrice;
        this.leadTime = data.leadTime;
        this.specifications = data.specifications;
        this.children = [];
    }

    addChild(component: IBOMComponent): void {
        this.children?.push(component);
    }

    removeChild(componentId:string): boolean {
        const index = this.children?.findIndex(c => c.id === componentId);
        if (index !== -1) {
            this.children?.splice(index as number, 1);
            return true;
        }

        return false;
    }

    getTotalCost(): number {
        const selfCost = (this.unitPrice || 0) * this.quantity;
        const childrenCost = this.children?.reduce((sum, child) => sum + child.getTotalCost(), 0) || 0;
        return selfCost + childrenCost;
    }

    findComponent(componentID: string): IBOMComponent | null {
        if (this.id === componentID) {
            return this;
        }

        if (this.children) {
            for (const child of this.children) {
                const found = child.findComponent(componentID);
                if (found) return found;
            }
        }

        return null;
    }

    getAllComponents(): BOMComponent[] {
        const components: IBOMComponent[] = [this];
        if (this.children) {
            for (const child of this.children) {
                components.push(...child.getAllComponents());
            }
        }

        return components;
    }
}

