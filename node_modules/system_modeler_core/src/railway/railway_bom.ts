import { BOMComponent, IBOMComponent, ISystem } from "../core/bom";

export interface ITrain extends ISystem {
    id: string;
    name: string;
    numberOfFleet: number; // 총 편성 갯수
    fleets: IFleet[]; // 편성 리스트
}

export interface IFleetStructure {
    masters: IMasterInfo[]; // 차량 정보 리스트
}

export interface IFleet {
    id: string;
    fleetNo: string; // 편성 번호
}

export type MasterType = // 차량 종류
'Tc' | // 제어차
'M' | // 구동차
'T' | // 부수차
'T\'' | // 팬터그래프가 있는 부수차
'M\'' | // 보조장치 포함 동력차
'Tc\'' | // 특수 제어차
'Mp' | // 팬터그래프 포함 동력차
'Mpp' | // 팬터그래프 2개 장착 동력차
'Tg' | // 발전차
'R' | // 레스토랑 차량
'S' | // 서비스 차
'C'; // 승무원실 포함차

export interface IMasterInfo { // 차량 정보
    id: string;
    name: string;
    type: MasterType;
    masterRank: number;
    locationInfo: IMasterLocationInfo;
}

export interface IMasterQuantity { // 차량 내 장치 갯수 정보
    masterId: string;
    masterInfo: IMasterInfo;
    quantity: number;
}

export interface IMasterLocationInfo { // 차량 내 위수 정보
    locationName: string;
}

export enum RailwayComponentCategory { // 철도 장치 분류 기준
    ROLLING_STOCK = 'ROLLING_STOCK',
    TRACK = 'TRACK',
    SIGNALING = 'SIGNALING',
    POWER_SUPPLY = 'POWER_SUPPLY',
    STATION_EQUIPMENT = 'STATION_EQUIPMENT',
    SAFETY_EQUIPMENT = 'SAFETY_EQUIPMENT',
    COMMUNICATION = 'COMMUNICATION'
}

export enum SafetyCertification { // 안전성 인증 주체
    EN50126 = 'EN50126', // RAMS
    EN50128 = 'EN50128', // Software
    EN50129 = 'EN50129', // Safety-related electronic systems
    SIL0 = 'SIL0',
    SIL1 = 'SIL1',
    SIL2 = 'SIL2',
    SIL3 = 'SIL3',
    SIL4 = 'SIL4'
}

export interface IRailwayBOMComponent extends IBOMComponent {
    category: RailwayComponentCategory;
    safetyCertifications?: SafetyCertification[];
    maintenanceInterval?: number; //in days
    lifespan?: number; //in years
    criticalComponent: boolean;
    level: number; // BOM 레벨
    materialCode: string; // 자재 코드
    manufacturerCode: string; // 제작사 코드
    quantityPerUnit: number; // 단위별 수량
    masterQuantities: IMasterQuantity[]; // 차량별 수량
    hasSparePartsDelivery: boolean; // 예비품 납품 유무
    isLRU: boolean; // LRU 유무
    sparePartsQuantity: number; // 현재 예비품 갯수
    failureRate?: number; //고장률
    mtbf?: number;
    mttr?: number;
    standard: string; // 규격
    material: string; // 재질
    location: IMasterLocationInfo; // 위수 정보
    drawingNumber: string; // 도면 번호

    getQuantityForMaster: (masterId: string) => number;
    getTotalMasterQuantity: () => number;
    setMasterQuantity: (masterId: string, masterInfo: IMasterInfo, quantity: number) => void;
    getSparePartsCost: () => number;
    getLRUComponents: () => IRailwayBOMComponent[];
    getComponentsByLevel: (level: number) => IRailwayBOMComponent[];
    toPredictionBOMTableRow: () => any;
}

export class RailwayBOMComponent extends BOMComponent implements IRailwayBOMComponent {
    category: RailwayComponentCategory;
    safetyCertifications?: SafetyCertification[];
    maintenanceInterval?: number;
    lifespan?: number;
    criticalComponent: boolean;
    level: number;
    materialCode: string;
    manufacturerCode: string;
    quantityPerUnit: number;
    masterQuantities: IMasterQuantity[];
    hasSparePartsDelivery: boolean;
    isLRU: boolean;
    sparePartsQuantity: number;
    failureRate?: number;
    mtbf?: number;
    mttr?: number;
    standard: string;
    material: string;
    location: IMasterLocationInfo;
    drawingNumber: string;

    constructor(data: Omit<IRailwayBOMComponent, 'addChild' | 'removeChild' | 'getTotalCost' | 'findComponent' | 'getAllComponents'>) {
        super(data);

        this.category = data.category;
        this.safetyCertifications = data.safetyCertifications;
        this.maintenanceInterval = data.maintenanceInterval;
        this.lifespan = data.lifespan;
        this.criticalComponent = data.criticalComponent;
        this.level = data.level;
        this.materialCode = data.materialCode;
        this.manufacturerCode = data.manufacturerCode;
        this.quantityPerUnit = data.quantityPerUnit;
        this.masterQuantities = data.masterQuantities;
        this.hasSparePartsDelivery = data.hasSparePartsDelivery;
        this.isLRU = data.isLRU;
        this.sparePartsQuantity = data.sparePartsQuantity;
        this.failureRate = data.failureRate;
        this.mtbf = data.mtbf;
        this.mttr = data.mttr;
        this.standard = data.standard;
        this.material = data.material;
        this.location = data.location;
        this.drawingNumber = data.drawingNumber;
    }

    getQuantityForMaster = (masterId: string) => {
        const masterQuantity = this.masterQuantities.find(mst => mst.masterId === masterId);
        return masterQuantity ? masterQuantity.quantity : 0;
    }

    getTotalMasterQuantity = () => {
        return this.masterQuantities.reduce((sum, mst) => sum + mst.quantity, 0);
    }

    setMasterQuantity = (masterId: string, masterInfo: IMasterInfo, quantity: number) => {
        const existingIndex = this.masterQuantities.findIndex(mst => mst.masterId === masterId);
        if (existingIndex !== -1) {
            this.masterQuantities[existingIndex].quantity = quantity;
        } else {
            this.masterQuantities.push({masterId, masterInfo, quantity});
        }
    }

    getSparePartsCost = () => {
        if (!this.hasSparePartsDelivery || !this.unitPrice) return 0;
        return this.sparePartsQuantity * this.unitPrice;
    }

    getLRUComponents = () => {
        const lruComponents: IRailwayBOMComponent[] = [];
        if (this.isLRU) {
            lruComponents.push(this);
        }

        if (this.children) {
            for (const child of this.children) {
                if (child instanceof RailwayBOMComponent) {
                    lruComponents.push(...child.getLRUComponents());
                }
            }
        }

        return lruComponents;
    }

    getComponentsByLevel = (level: number) => {
        const components: IRailwayBOMComponent[] = [];
        if (this.level === level) {
            components.push(this);
        }
        if (this.children) {
            for(const child of this.children) {
                if (child instanceof RailwayBOMComponent) {
                    components.push(...child.getComponentsByLevel(level));
                }
            }
        }

        return components;
    }

    toPredictionBOMTableRow = () => {
        
    }
}

