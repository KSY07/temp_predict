import { EnvironmentalCondition, FMECA, ICause, IEffect, IFailureMode, IFMECA, MaintenanceStrategy, SeverityLevel } from "../core/fmeca";
import { IRailwayBOMComponent, RailwayBOMComponent, SafetyCertification } from "./railway_bom";

export interface IRailwayFMECA extends IFMECA {
    silLevel?: SafetyCertification;
    hazardCategory?: HazardCategory;
    operationalPhase: OperationalPhase;
    environmentalConditions?: EnvironmentalCondition[];
    maintenanceStrategy?: MaintenanceStrategy;
    complianceStandards: string[];

    getCriticalityLevel: () => string;
}

export enum HazardCategory { // 위험 분류
    DERAILMENT = 'DERAILMENT',
    COLLISION = 'COLLISION',
    FIRE = 'FIRE',
    ELECTRIC_SHOCK = 'ELECTRIC_SHOCK',
    STRUCTURAL_FAILURE = 'STRUCTURAL_FAILURE',
    SIGNALING_FAILURE = 'SIGNALING_FAILURE',
    BRAKE_FAILURE = 'BRAKE_FAILURE'
}

export enum OperationalPhase {
    ACCELERATION = 'ACCELERATION',
    CRUISING = 'CRUISING',
    BRAKING = 'BRAKING',
    STATION_STOP = 'STATION_STOP',
    MAINTENANCE = 'MAINTENANCE',
    EMERGENCY = 'EMERGENCY'
}


export class RailwayFMECA extends FMECA implements IRailwayFMECA {
      silLevel?: SafetyCertification;
      hazardCategory?: HazardCategory;
      operationalPhase: OperationalPhase;
      environmentalConditions?: EnvironmentalCondition[];
      maintenanceStrategy?: MaintenanceStrategy;
      complianceStandards: string[];

      constructor(data: Omit<IRailwayFMECA, 'rpn'>) {
          super(data);
          this.silLevel = data.silLevel;
          this.hazardCategory = data.hazardCategory;
          this.operationalPhase = data.operationalPhase;
          this.environmentalConditions = data.environmentalConditions;
          this.maintenanceStrategy = data.maintenanceStrategy;
          this.complianceStandards = data.complianceStandards;
      }

      validateSILRequirement(): boolean {
          // SIL 레벨에 따른 RPN 임계값 검증
          const silThresholds = {
              [SafetyCertification.SIL4]: 50,
              [SafetyCertification.SIL3]: 100,
              [SafetyCertification.SIL2]: 150,
              [SafetyCertification.SIL1]: 200
          };

          if (this.silLevel && this.silLevel in silThresholds) {
              return this.rpn <= silThresholds[this.silLevel as keyof typeof silThresholds];
          }
          return true;
      }

      getMaintenanceRecommendation(): MaintenanceStrategy {
          if (this.rpn >= 200 || this.severity >= SeverityLevel.CRITICAL) {
              return MaintenanceStrategy.CONDITION_BASED;
          } else if (this.rpn >= 100) {
              return MaintenanceStrategy.PREDICTIVE;
          } else if (this.rpn >= 50) {
              return MaintenanceStrategy.PREVENTIVE;
          }
          return MaintenanceStrategy.CORRECTIVE;
      }
  }

  // BOM과 FMECA 통합을 위한 확장
  export interface IBOMWithFMECA extends IRailwayBOMComponent {
      fmecaItems: IRailwayFMECA[];
  }

  export class BOMWithFMECA extends RailwayBOMComponent implements IBOMWithFMECA {
      fmecaItems: IRailwayFMECA[];

      constructor(data: RailwayBOMComponent & { fmecaItems?: IRailwayFMECA[] }) {
          super(data);
          this.fmecaItems = data.fmecaItems || [];
      }

      addFMECA(fmeca: IRailwayFMECA): void {
          this.fmecaItems.push(fmeca);
      }

      removeFMECA(fmecaId: string): boolean {
          const index = this.fmecaItems.findIndex(f => f.id === fmecaId);
          if (index !== -1) {
              this.fmecaItems.splice(index, 1);
              return true;
          }
          return false;
      }

      getCriticalFailureModes(): IRailwayFMECA[] {
          return this.fmecaItems.filter(fmeca => fmeca.rpn >= 100);
      }

      getTotalRiskScore(): number {
          return this.fmecaItems.reduce((sum, fmeca) => sum + fmeca.rpn, 0);
      }

      getFailureModesByPhase(phase: OperationalPhase): IRailwayFMECA[] {
          return this.fmecaItems.filter(fmeca => fmeca.operationalPhase === phase);
      }

      generateFMECAReport(): any {
          return {
              componentId: this.id,
              componentName: this.name,
              totalFailureModes: this.fmecaItems.length,
              criticalFailureModes: this.getCriticalFailureModes().length,
              totalRiskScore: this.getTotalRiskScore(),
              averageRPN: this.fmecaItems.length > 0 ?
                  this.getTotalRiskScore() / this.fmecaItems.length : 0,
              failureModes: this.fmecaItems.map(fmeca => ({
                  id: fmeca.id,
                  mode: fmeca.failureMode.description,
                  rpn: fmeca.rpn,
                  criticality: fmeca.getCriticalityLevel(),
                  phase: fmeca.operationalPhase
              }))
          };
      }
  }

